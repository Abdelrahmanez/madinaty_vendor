---
globs: src/hooks/**/*.js
---

# Custom Hooks Pattern

## Purpose

Custom hooks are the primary method for encapsulating and reusing logic in the FitRack app. They allow us to:

- Extract stateful logic from components
- Share logic between components
- Separate concerns (UI vs. business logic)
- Make code more testable

## Naming Convention

- All custom hooks **must** start with `use` prefix
- Names should clearly indicate the hook's purpose (e.g., `useProducts`, `useAuthentication`)
- Use camelCase naming

## Structure Guidelines

### Input/Output

- Accept minimal required parameters
- Return an object with named properties (destructurable)
- Include loading and error states when appropriate

### State Management

- Keep related state together
- Use reducer pattern for complex state logic
- Consider memoization for expensive calculations

## Examples

### Data Fetching Hook

```javascript
import { useState, useEffect } from 'react';
import axiosInstance from '../__apis__/axios';

export default function useFetch(url, options = {}) {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const response = await axiosInstance.get(url, options);
        setData(response.data);
        setError(null);
      } catch (err) {
        setError(err.message || 'Error fetching data');
        setData(null);
      } finally {
        setLoading(false);
      }
    };
    
    fetchData();
  }, [url]);
  
  return { data, loading, error };
}
```

### Form Logic Hook

```javascript
import { useState, useCallback } from 'react';

export default function useForm(initialValues = {}, onSubmit, validate) {
  const [values, setValues] = useState(initialValues);
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const handleChange = useCallback((name, value) => {
    setValues(prev => ({ ...prev, [name]: value }));
    
    // Clear error when field is edited
    if (errors[name]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[name];
        return newErrors;
      });
    }
  }, [errors]);
  
  const handleSubmit = useCallback(async () => {
    if (validate) {
      const validationErrors = validate(values);
      if (Object.keys(validationErrors).length > 0) {
        setErrors(validationErrors);
        return;
      }
    }
    
    setIsSubmitting(true);
    try {
      await onSubmit(values);
      // Reset form after successful submission
      setValues(initialValues);
    } catch (error) {
      console.error('Form submission error:', error);
    } finally {
      setIsSubmitting(false);
    }
  }, [values, initialValues, validate, onSubmit]);
  
  return {
    values,
    errors,
    isSubmitting,
    handleChange,
    handleSubmit,
    setValues
  };
}
```

## Best Practices

1. **Single Responsibility**
   - Each hook should have a clear, focused purpose
   - Split complex hooks into smaller ones

2. **Composition**
   - Build complex hooks by composing simpler ones
   - Example: `useAuthenticatedApi` could use both `useAuth` and `useFetch`

3. **Side Effects**
   - Clean up side effects properly
   - Use dependencies array correctly in `useEffect`

4. **Performance**
   - Use memoization (`useMemo`, `useCallback`) for expensive operations
   - Avoid creating functions in render

Follow these patterns to ensure clean separation of logic from UI components.
